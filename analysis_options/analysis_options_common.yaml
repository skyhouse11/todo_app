# Common analyzer settings and rules that apply to all Dart code
analyzer:
  # Exclude generated files from analysis
  exclude:
    - '**.freezed.dart'
    - '**.g.dart'
    - '**.config.dart'
    - '**.mocks.dart'
    - 'build/**'
    - 'lib/generated/**'
    - 'test/.test_coverage.dart'

  # Strict type checking
  language:
    strict-casts: true      # Ensures type safety with explicit casts
    strict-inference: true  # Requires explicit type annotations
    strict-raw-types: true  # Ensures raw types are properly specified

  # Analyzer Rules - Core Rules
  rules:
    # Code Quality Rules
    - avoid-collection-methods-with-unrelated-types
    - avoid-duplicate-exports
    - avoid-global-state
    - avoid-late-keyword
    - avoid-nested-conditional-expressions
    - avoid-non-null-assertion
    - avoid-throw-in-catch-block
    - avoid-top-level-members-in-tests
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - binary-expression-operand-order
    - double-literal-format
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - no-equal-then-else
    - no-object-declaration
    - prefer-conditional-expressions
    - prefer-correct-identifier-length
    - prefer-correct-type-name
    - prefer-first
    - prefer-last
    - prefer-match-file-name
    - prefer-trailing-comma

  # Anti-pattern detection
  anti-patterns:
    - long-method
    - long-parameter-list

# Core Linter Rules
linter:
  rules:
    # Error Prevention
    always_use_package_imports: false
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_print: true
    avoid_relative_lib_imports: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    cancel_subscriptions: true
    close_sinks: true
    control_flow_in_finally: true
    empty_catches: true
    hash_and_equals: true
    invariant_booleans: true
    iterable_contains_unrelated_type: true
    list_remove_unrelated_type: true
    literal_only_boolean_expressions: true
    no_duplicate_case_values: true
    prefer_void_to_null: true
    test_types_in_equals: true
    throw_in_finally: true
    unnecessary_statements: true
    unrelated_type_equality_checks: true
    use_key_in_widget_constructors: true
    valid_regexps: true

    # Null Safety
    cast_nullable_to_non_nullable: true
    null_check_on_nullable_type_parameter: true
    null_clauses: true
    
    # Best Practices
    deprecated_consistency: true
    do_not_use_environment: true
    empty_constructor_bodies: true
    empty_statements: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    join_return_with_assignment: true
    no_default_cases: true
    no_runtimeType_toString: true
    noop_primitive_operations: true
    only_throw_errors: true
    overridden_fields: true
    parameter_assignments: true
    prefer_asserts_in_initializer_lists: true
    prefer_asserts_with_message: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_contains: true
    prefer_equal_for_default_values: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_foreach: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_int_literals: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    prefer_spread_collections: true
    recursive_getters: true
    tighten_type_of_initializing_formals: true
    type_init_formals: true
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_constructor_name: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_late: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    unnecessary_to_list_in_spreads: true
    unreachable_from_main: true
    use_function_type_syntax_for_parameters: true
    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_rethrow_when_possible: true
    use_string_buffers: true
    use_super_parameters: true
    use_to_and_as_if_applicable: true
    void_checks: true
    invalid_annotation_target: ignore
    depend_on_referenced_packages: false
